class Primes:

    @staticmethod
    def first(n):
        lst = [2]
        count = 1
        number = 3
        while count < n:
            for d in range(3, int(number**0.5)+1,2):
                if number % d == 0:
                    break
            else:
                lst.append(number)
                count += 1
            number += 2
        return lst
        
        
                                                    Time: 11300    
                                                    
                                                  
   Variant 2:
   
   
   class Primes:

    @staticmethod
    def first(n):
        lst_prime = [2,3,5]
        lst = [3]
        number = 7
        count = 3
        next_index_sqr = 2
        while count < n:
            if number >= lst_prime[next_index_sqr]**2 : 
                lst.append(lst_prime[next_index_sqr])
                next_index_sqr += 1
            if all( number % x for x in lst):
                lst_prime.append(number)
                count += 1
            number += 2
        return lst_prime[:n]
        
                                                    Time: 6300
